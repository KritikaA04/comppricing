function RequestWaiverCode() {
    const dispatch = useDispatch();
    const cancelTasks = useSelector(getCancelTasks);
    const requestWaiverCodeData = useSelector(getRequestWaiverCode);
    const ticketWiseData = useSelector(getTicketWiseData);
    const allBookings = useSelector(getAllBookingsData);
    const activeTab = useSelector(getActiveTabId);
    const TransactionID = useSelector(getCancelTransactionId);
    const setTaskLoader = useSelector(getSetTaskLoader);
    const cancelTransactionGuid = useSelector(getCancelTransactionGuid);
    const refundDetails = useSelector(getRefundDetails);
    const isFusionFare = allBookings?.[activeTab]?.CancelTransaction?.refundDetails?.isFusionFare;
    const [waiverCode, setWaiverCode] = useState([]);
    const [response, setResponse] = useState();
    const [isValid, setIsValid] = useState(true);
    const [isUpdated, setIsUpdated] = useState(false);
    const [isAlertShouldVisible, setIsAlertShouldVisible] = useState(false);
    const [isPasted, setIsPasted] = useState(false);
    const [isAttempted, setIsAttempted] = (requestWaiverCodeData?.find(code => !code?.osiRemarks) && !ticketWiseData) ? useState(false) : useState(true);
    const [waiverMode, setWaiverMode] = ticketWiseData && requestWaiverCodeData ? useState('airline') : ticketWiseData ? useState('ticketwise') : useState('airline');
    const [showContinueMessage, setShowContinueMessage] = useState(false);
    const indexMap = [];
    if (ticketWiseData) {
        const tktDataDetials = ticketWiseData?.filter(code => code?.waiverCode === code?.osiRemarks && code?.waiverCode != "");
        tktDataDetials.forEach((tktData) =>
            indexMap.push(ticketWiseData?.findIndex((e) => e === tktData))
        );
    }
    // console.log(requestWaiverCodeData);
    useEffect(() => {
        if (requestWaiverCodeData || ticketWiseData) {
            const isAnyOSI = (
                (waiverMode == 'airline' && requestWaiverCodeData?.find(code => (code?.waiverCodeLocation === 'OSI and Waiver') || (code?.waiverCodeLocation === 'OSI')))
                || (waiverMode == 'ticketwise' && ticketWiseData?.find(code => (code?.waiverCodeLocation === 'OSI and Waiver') || (code?.waiverCodeLocation === 'OSI')))
            );
            isAnyOSI ? setIsAlertShouldVisible(true) : setIsAlertShouldVisible(false);
        }
    }, [requestWaiverCodeData, ticketWiseData, waiverMode]);

    if (!cancelTasks || setTaskLoader) {
        return <Loader />;
    }
    const validateFrom = (req, index) => {
        if (req?.waiverCodeLocation === null || req?.waiverCodeLocation === "" || ((req?.waiverCode === null || req?.waiverCode === "") && req?.waiverCodeLocation != "OSI") || ((req?.waiverCodeLocation === "OSI and Waiver" || req?.waiverCodeLocation === "OSI") && (req?.osiRemarks === null || req?.osiRemarks === ""))) {
            if ((req?.waiverCode === null || req?.waiverCode === "") && req?.waiverCodeLocation != "OSI") {
                updateRequestWaiverObject({ waiverCodeErrorMessage: "WaiverCode Is Required." }, index);
            }
            if (req?.waiverCodeLocation === null || req?.waiverCodeLocation === "") {
                updateRequestWaiverObject({ waiverCodeLocationErrorMessage: "Please select WaiverCodeLocation." }, index);
            }
            if ((req?.waiverCodeLocation === "OSI and Waiver" || req?.waiverCodeLocation === "OSI") && (req?.osiRemarks === null || req?.osiRemarks === "")) {
                updateRequestWaiverObject({ osiRemarksEroorMessage: "Please Update OSI Remarks" }, index);
            }
            return false;
        }
        return true;
    }

    const updateRequestWaiverObject = (updatedProperty, index) => {
        if (waiverMode === 'ticketwise') {
            updateTicketWiseObject(updatedProperty, index);
        }
        else {
            const selectedcode = requestWaiverCodeData[index];
            const currentBooking = allBookings[activeTab];
            const updatedTaskObject = update(currentBooking.CancelTransaction.RequestWaiverCode.taskObject[2].object, { $splice: [[index, 1, { ...selectedcode, ...updatedProperty }]] });
            const updatedSelectedBooking = update(allBookings, {
                $splice: [[activeTab, 1, {
                    activeTab: activeTab, ...currentBooking,
                    CancelTransaction: {
                        ...currentBooking.CancelTransaction, RequestWaiverCode: {
                            ...currentBooking.CancelTransaction.RequestWaiverCode,
                            taskObject: update(currentBooking.CancelTransaction.RequestWaiverCode.taskObject, {
                                $splice: [[2, 1, {
                                    objectId: 3,
                                    objectName: "RequestWaiverCodeDetails",
                                    object: updatedTaskObject
                                }]]
                            })
                        }
                    }
                }]]
            });
            dispatch(updateSelectedBooking(updatedSelectedBooking));
        }
    }
    const updateTicketWiseObject = (updatedProperty, index) => {
        const selectedcode = ticketWiseData[index];
        const currentBooking = allBookings[activeTab];
        const updatedTaskObject = update(currentBooking.CancelTransaction.RequestWaiverCode.taskObject[3].object, { $splice: [[index, 1, { ...selectedcode, ...updatedProperty }]] });
        const updatedSelectedBooking = update(allBookings, {
            $splice: [[activeTab, 1, {
                activeTab: activeTab, ...currentBooking,
                CancelTransaction: {
                    ...currentBooking.CancelTransaction, RequestWaiverCode: {
                        ...currentBooking.CancelTransaction.RequestWaiverCode,
                        taskObject: update(currentBooking.CancelTransaction.RequestWaiverCode.taskObject, {
                            $splice: [[3, 1, {
                                objectId: 20,
                                objectName: "TicketWiseData",
                                object: updatedTaskObject
                            }]]
                        })
                    }
                }
            }]]
        });
        dispatch(updateSelectedBooking(updatedSelectedBooking));
    }
    const setCode = (value, index) => {
        if (value.match(/^[0-9a-zA-Z]+$/) && value.length <= 14 || value === "") {
            const wcode = waiverCode[index];
            updateRequestWaiverObject({ waiverCode: value, waiverCodeErrorMessage: "" }, index)
            let updatedCode = update(waiverCode, { $splice: [[index, 1, { ...wcode, code: value }]] });
            setWaiverCode(updatedCode);
            setResponse(null);
        }
        else if (isPasted) {
            setIsPasted(false);
            if (value.length > 14) {
                updateRequestWaiverObject({ waiverCode: "", waiverCodeErrorMessage: "Not allowed to paste more than 14 Characters. Please shorten text and try again" }, index)
            }
            if (!value.match(/^[0-9a-zA-Z]+$/)) {
                updateRequestWaiverObject({ waiverCode: "", waiverCodeErrorMessage: "System will not allow to paste special characters. Please try again" }, index)
            }
        }
        else if (!value.match(/^[0-9a-zA-Z]+$/)) {
            updateRequestWaiverObject({ waiverCodeErrorMessage: "System will not allow to input special characters." }, index)
        }
        else if (value.length > 14) {
            updateRequestWaiverObject({ waiverCode: "", waiverCodeErrorMessage: "Allowed Limit: 14 Alpha-Numeric Characters only" }, index)
        }
    };
    const handleChange = (value, index) => {
        if (value != null && value === "None" && (requestWaiverCodeData?.[index]?.osiRemarksEroorMessage === "No Waiver Location Selected" || waiverMode === 'ticketwise')) {
            updateRequestWaiverObject({ waiverCodeLocation: value, waiverCodeLocationErrorMessage: "", osiRemarksEroorMessage: "", osiRemarks: "" }, index);
        }
        else if (value != null && value !== "None" && (requestWaiverCodeData?.[index]?.osiRemarksEroorMessage === "No Waiver Location Selected" || waiverMode === 'ticketwise')) {
            updateRequestWaiverObject({ waiverCodeLocation: value, waiverCodeLocationErrorMessage: "", osiRemarksEroorMessage: "" }, index);
        }
        else if (value === "None") {
            updateRequestWaiverObject({ waiverCodeLocation: value, waiverCodeLocationErrorMessage: "", osiRemarks: "" }, index);
        }
        else {
            updateRequestWaiverObject({ waiverCodeLocation: value, waiverCodeLocationErrorMessage: "" }, index);
        }

    }
    const remarksUpdate = (value, index) => {
        if ((waiverMode === 'airline' && requestWaiverCodeData[index]?.waiverCodeLocation) || (waiverMode === 'ticketwise')) {
            if (value.match(/^[0-9a-zA-Z]+$/) || value === '') {
                updateRequestWaiverObject({ osiRemarks: value, osiRemarksEroorMessage: "" }, index);
            } else {
                updateRequestWaiverObject({ osiRemarksEroorMessage: "No Special Characters Allowed" }, index);
            }
        }
        else {
            updateRequestWaiverObject({ osiRemarksEroorMessage: "No Waiver Location Selected" }, index);
        }
    }
    const callBack = (responseData) => {
        responseData?.isSuccess && setIsUpdated(true);
        if (responseData?.isSuccess === false) { setIsUpdated(false) }
        setResponse({ isSuccess: responseData?.isSuccess, errorMessage: responseData?.errorMessage });
        setIsValid(true);
    };
    const sendWaiverCode = () => {
        setIsAttempted(false);
        let validate;
        if (waiverMode === 'airline') {
            requestWaiverCodeData?.map((req, index) => {
                if (validate === false) {
                    validateFrom(req, index);
                }
                if (validate === undefined || validate === true) {
                    validate = validateFrom(req, index);
                }
            });
            if (validate && requestWaiverCodeData && requestWaiverCodeData.length > 0) {
                dispatch(updateWaiverCode(TransactionID, cancelTransactionGuid, requestWaiverCodeData, callBack, waiverMode));
            }
        }
        if (waiverMode === 'ticketwise') {
            ticketWiseData?.map((req, index) => {
                if (validate === false) {
                    validateFrom(req, index);
                }
                if (validate === undefined || validate === true) {
                    validate = validateFrom(req, index);
                }
            });
            if (validate && ticketWiseData && ticketWiseData?.length > 0) {
                dispatch(updateWaiverCode(TransactionID, cancelTransactionGuid, ticketWiseData, callBack, waiverMode));
            }
        }
        else {
            return;
        }

    };
    const validation = () => {
        let validate;
        if (waiverMode == 'airline') {
            requestWaiverCodeData?.map((req, index) => {
                validate = validateFrom(req, index);
            });
        }
        if (waiverMode === 'ticketwise') {
            ticketWiseData?.map((req, index) => {
                validate = validateFrom(req, index);
            });
        }
        if (validate && !isUpdated) {
            setShowContinueMessage(true);
            setTimeout(() => {
                setShowContinueMessage(false);
            }, 7000);
        }
        const ifnull = waiverCode.filter((x) => {
            if (!x.code) {
                return x;
            }
        });
        if (isUpdated) {
            return true;
        }
        else if (waiverCode.length === 0 || !isUpdated) {
            setIsValid(false);
            return false;
        } else if (requestWaiverCodeData.length !== waiverCode.length) {
            return false;
        } else if (ifnull.length > 0) {
            return false;
        } else {
            return true;
        }
    };

    const setMode = (e) => {
        setWaiverMode(e.target.value);
        setResponse();
        setIsAttempted(true);
    }

    return (
        <>
            <TimerLogic />
            {refundDetails && TransactionID && (
                <RefundDetails
                    key={`cnlfee_rd_${TransactionID}`}
                    isCancelProceeded
                    cancellationDetails={{
                        cancelIntentTasksRBResponse: { objectDetails: refundDetails },
                    }}
                    transactionID={TransactionID}
                    updateSelectedBooking={() => { }}
                    updateCancellationObject={() => { }}
                    validateWaiverReason={false}
                    waiverReasonName={""}
                />
            )}            
            <section id="waver-code" className="waver-step mt-3">
                <div className="content-block">
                    <div className="h-block d-flex align-items-center">
                        <div className="h-text"> Add Waiver Code </div>
                        <select className="form-control col-4" data-testid="handleChange" onChange={(e) => { setMode(e) }}>
                            <option value="airline" disabled={!requestWaiverCodeData}>Airline Waiver</option>
                            <option value="ticketwise" disabled={!(ticketWiseData && !isFusionFare)} selected={waiverMode === 'ticketwise'}>Ticketwise Waiver</option>
                        </select>
                    </div>
                    <div className="p-2">
                        <table className="table border-no">
                            <thead>
                                {waiverMode != 'ticketwise' ? <tr>
                                    <th width="22%">Location</th>
                                    <th width="34%" className="pl-4">Airline Code / Name</th>
                                    <th width="22%">Waiver Code</th>
                                    <th width="22%">OSI Remarks</th>
                                </tr> : <tr>
                                    <th width="20%">Location</th>
                                    <th width="22%" className="pl-4">Airline Code / Name</th>
                                    <th width="18%" className="pl-4">Ticket No. / TID</th>
                                    <th width="20%">Waiver Code</th>
                                    <th width="20%">OSI Remarks</th>
                                </tr>}
                            </thead>
                            <tbody>
                                {waiverMode === "airline" && requestWaiverCodeData?.map((code, index) => {
                                    return (
                                        <tr key={`cd_${index}`}>
                                            <td>
                                                <select className="form-control waver-txtbox w-75" value={code?.waiverCodeLocation} data-testid="handleChange" onChange={(e) => { setIsAttempted(true); handleChange(e.target.value, index) }}>
                                                    <option value='' >--Select--</option>
                                                    <option value="OSI and Waiver">OSI and Waiver</option>
                                                    <option value="None">Waiver</option>
                                                    <option value="OSI">OSI</option>
                                                </select>
                                                {<div className="email-txt" style={{ marginTop: "4px" }}><span className="stperrormsg">{code?.waiverCodeLocationErrorMessage}</span></div>}
                                            </td>
                                            <td className="pl-4">{code?.airlineCode} / {code?.airlineFullName}</td>
                                            <td>
                                                <input type="text" className="form-control waver-txtbox w-75" value={code?.waiverCode || ""} data-testid="setCode" onChange={(e) => { setIsAttempted(true); setCode(e.target.value, index); }} onPaste={() => { setIsPasted(true); }} disabled={code?.waiverCodeLocation === 'OSI' || code?.waiverCodeLocation === ''} />
                                                {<div className="email-txt" style={{ marginTop: "4px" }}><span className="stperrormsg">{code?.waiverCodeErrorMessage}</span></div>}
                                            </td>
                                            <td>
                                                <input type="text" className="form-control waver-txtbox w-75" value={(code?.waiverCodeLocation === 'OSI and Waiver' || code?.waiverCodeLocation === "OSI") ? code?.osiRemarks : ""} data-testid="remarksUpdate" onChange={(e) => { setIsAttempted(true); remarksUpdate(e.target.value, index); }} disabled={code?.waiverCodeLocation === 'None' || code?.waiverCodeLocation === ''} />
                                                {<div className="email-txt" style={{ marginTop: "4px" }}><span className="stperrormsg">{code?.waiverCodeLocation !== 'None' ? code?.osiRemarksEroorMessage : ""}</span></div>}
                                            </td>
                                        </tr>
                                    );
                                })}
                                {waiverMode === "ticketwise" && ticketWiseData?.map((code, index) => {
                                    return (
                                        <tr key={`cd_${index}`}>
                                            <td>
                                                <select className="form-control waver-txtbox w-75" value={code?.waiverCodeLocation} data-testid="handleChange" onChange={(e) => { setIsAttempted(true); handleChange(e.target.value, index); }}>
                                                    <option value='' >--Select--</option>
                                                    <option value="OSI and Waiver">OSI and Waiver</option>
                                                    <option value="None">Waiver</option>
                                                    <option value="OSI">OSI</option>
                                                </select>
                                                {<div className="email-txt" style={{ marginTop: "4px" }}><span className="stperrormsg">{code?.waiverCodeLocationErrorMessage}</span></div>}
                                            </td>
                                            <td className="pl-4">{code?.validatingCarrierCode} / {code?.validatingCarrierName}</td>
                                            <td>{code?.ticketNumber} / {code?.transactionId}</td>
                                            <td>
                                                <input type="text" className="form-control waver-txtbox w-75" value={code?.waiverCode || ""} data-testid="setCode" onChange={(e) => { setIsAttempted(true); setCode(e.target.value, index); }} onPaste={() => { setIsPasted(true); }} disabled={code?.waiverCodeLocation === 'OSI'} />
                                                {<div className="email-txt" style={{ marginTop: "4px" }}><span className="stperrormsg">{code?.waiverCodeErrorMessage}</span></div>}
                                            </td>
                                            <td>
                                                <input type="text" className="form-control waver-txtbox w-75" value={code?.waiverCodeLocation === 'OSI and Waiver' || code?.waiverCodeLocation === "OSI" ? code?.osiRemarks : ""} data-testid="remarksUpdate" onChange={(e) => { setIsAttempted(true); remarksUpdate(e.target.value, index); }} disabled={code?.waiverCodeLocation === 'None' || code?.waiverCodeLocation === ''} />
                                                {<div className="email-txt" style={{ marginTop: "4px" }}><span className="stperrormsg">{code?.waiverCodeLocation !== 'None' ? code?.osiRemarksEroorMessage : ""}</span></div>}
                                            </td>

                                        </tr>
                                    )
                                })
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </section>
            <section id="btn-section">
                <div className="row pt-3 mb-4">
                    <div className="col-md-12">
                        {!isAttempted ? (<div className="email-txt" style={{ marginTop: "4px" }}>
                            {!isValid ? <span className="col-3 stperrormsg">Please Click update button first and then click continue.</span> : response ? response.isSuccess ? <span className="stpmsg">Waiver Code Update Success.</span> : <span className="stperrormsg">Waiver Code Update Failed.</span> : ""}
                        </div>) : (<></>)}
                        <button disabled={!isAttempted} type="button" className="btn btn-outline-primary" data-testid="sendWaiverCode" onClick={sendWaiverCode} >Update</button>
                    </div>
                </div>
                {isAlertShouldVisible && alertMessage("Automation will Pass OSI when Cancel booking task executed by OAP. Please pass OSI manually in then PNR if OAP automation failed to transfer OSI in the PNR.")}
                {showContinueMessage && <span className="col-3 stperrormsg">Please Click update button first and then click continue.</span>}
            </section>
            {<Footer nextUrl={"/cancelTransaction/sendotp"} hideBack validate={validation} />}
        </>
    );
}
export default RequestWaiverCode;
