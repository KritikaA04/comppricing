import React, { useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import Loader from '../../../Shared/Loader';
import { getActiveTabId, getAllBookingsData, getRefundDetails, getCancelTransactionId } from '../CancelTransactionSelectors';
import Footer from '../Footer';
import { getSplitPnrBooking } from '../../../../actions/CancelTransaction/CancelTransactionAction';
import update from 'immutability-helper';
import { PaxTicketDetails } from './PaxTicketDetails';
import { SplitPnrBooking } from './SplitPnrBooking';
import SessionStorageHelper from '../../../../services/SessionStorageHelper';
import { TransactionTypeID } from '../../../../constants/Constants';
import TimerLogic from '../TimerLogic';
import RefundDetails from '../RefundWindow/RefundDetails';
 
function SplitPax({ transactionTypeID, nextUrl }) {
    const allBookings = useSelector(getAllBookingsData);
    const activeTab = useSelector(getActiveTabId);
    const refundDetails = useSelector(getRefundDetails);
    const transactionId = useSelector(getCancelTransactionId);
 
    const dispatch = useDispatch();
 
    const [isLoading, setIsLoading] = useState(false);
    const [isValid, setIsValid] = useState(true);
    const [splitError, setSplitError] = useState("");
    const currentBooking = allBookings[activeTab];
    const [splitPnrBookings, setSplitPnrBookings] = useState(currentBooking?.CancelTransaction?.SplitPaxData);
    const parentTid = splitPnrBookings?.originalTransactionID ? splitPnrBookings?.originalTransactionID : currentBooking?.CancelTransaction?.transactionInfo?.transactionID;
    const splitPaxTicketDetails = currentBooking.CancelTransaction?.SplitPax?.taskObject?.find((x) => x.objectName === "SplitPassengerDetail")?.object;
    const isVoidable = currentBooking.CancelTransaction?.SplitPax?.taskObject?.find((x) => x.objectName === "VoidingDetail")?.object?.isVoidable;
 
    const setSplitPnrBookingsInTransaction = (splitPnrResponse) => {
        if (splitPnrResponse != null) {
            setSplitError(!splitPnrResponse?.isSuccess);
 
            // update splitTid in booking
            var updatedBookings = update(
                allBookings,
                {
                    $splice: [[
                        activeTab,
                        1,
                        {
                            ...currentBooking,
                            booking: {
                                ...currentBooking?.booking,
                                transactionID: splitPnrResponse?.splitTransactionId,
                                transactionScreenID: splitPnrResponse?.splitTransactionId,
                                transactionGUID: splitPnrResponse?.splitTransactionGuid
                            },
                            CancelTransaction: {
                                ...currentBooking?.CancelTransaction,
                                transactionInfo: {
                                    ...currentBooking?.CancelTransaction?.transactionInfo,
                                    transactionID: splitPnrResponse?.splitTransactionId,
                                    transactionGuid: splitPnrResponse?.splitTransactionGuid
                                },
                                SplitPaxData: splitPnrResponse
                            }
                        }
                    ]]
                }
            );
            SessionStorageHelper.saveInSessionStorage("oapData", updatedBookings);
        }
        setSplitPnrBookings(splitPnrResponse);
    };
 
    const getSplitPnrBookingAPI = () => {
        const req = {
            transactionID: currentBooking?.CancelTransaction?.transactionInfo?.transactionID,
            OapTransactionGuid: currentBooking?.CancelTransaction?.cancelTransactionGuid,
            isVoidable,
            paxDetails: splitPaxTicketDetails?.map(pax => ({
                'gdsPaxRef': pax?.paxRef,
                'paxType': pax?.paxType,
                'dbPaxOrder': pax?.paxOrder,
                'isSplitRequested': !pax?.isPaxNotAllowedToCancelled,
            }))
        };
        setIsLoading(true);
        dispatch(
            getSplitPnrBooking(
                req,
                (response) => {
                    setSplitPnrBookingsInTransaction(response);
                    setIsValid(true);
                    setIsLoading(false);
                })
        )
    };
 
    const validation = () => {
        if (splitPnrBookings?.isProceedAllowed === true) {
            setIsValid(true);
            setIsLoading(true);
            return true;
        } else {
            setIsValid(false);
            return false;
        }
    }
