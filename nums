[Fact]
public async Task Test_SplitPNR_CoversMultipleScenarios()
{
    // Arrange
    var mockCancelTxnMongo = new Mock<ICancelTxnMongo>();
    var mockChangeExchangeApi = new Mock<IChangeExchangeApi>();
    var mockOapTransactionRepository = new Mock<IOapTransactionRepository>();
    var mockOapCxlUtility = new Mock<IOapCxlUtility>();
    var mockInvoiceDataAPI = new Mock<IInvoiceDataAPI>();
    var mockLogger = new Mock<ILogger<YourServiceClass>>();

    var splitPnrRequest = new SplitPnrRequest { OapTransactionGuid = Guid.NewGuid() };
    var userId = 123;

    // Scenario 1: Cancel transaction data not found
    mockCancelTxnMongo.Setup(x => x.GetCancelTransactionResponse(It.IsAny<Guid>()))
                      .ReturnsAsync((CancelTxnData)null);

    // Scenario 2: API error in splitting PNR
    mockChangeExchangeApi.Setup(x => x.SplitPNR(It.IsAny<SplitPnrRequest>(), It.IsAny<int>()))
                         .ReturnsAsync(new SplitPnrResponse { ErrorInfo = "API Error", IsSuccess = false });

    // Scenario 3: Successful operation
    var cancelTxnData = new CancelTxnData { TransactionID = 1, OAPTransactionID = 1001 };
    mockCancelTxnMongo.Setup(x => x.GetCancelTransactionResponse(It.IsAny<Guid>()))
                      .ReturnsAsync(cancelTxnData);

    var splitPnrResponse = new SplitPnrResponse
    {
        IsSuccess = true,
        SplittedTransactionIDs = new List<TransactionDetail> { new TransactionDetail { IsSplitPNR = true, TransactionID = 2 } }
    };
    mockChangeExchangeApi.Setup(x => x.SplitPNR(It.IsAny<SplitPnrRequest>(), It.IsAny<int>()))
                         .ReturnsAsync(splitPnrResponse);

    // More setups as required for the remaining dependencies...

    var service = new YourServiceClass(mockCancelTxnMongo.Object, mockChangeExchangeApi.Object, /* other dependencies */);

    // Act
    var result = await service.SplitPNR(splitPnrRequest, userId);

    // Assert
    // Verify that all paths have been touched appropriately
    Assert.NotNull(result);
    mockLogger.Verify(x => x.LogInformation(It.IsAny<string>(), It.IsAny<object[]>()), Times.AtLeastOnce());
    mockLogger.Verify(x => x.LogError(It.IsAny<Exception>(), It.IsAny<string>(), It.IsAny<object[]>()), Times.AtLeastOnce());

    // Additional assertions for each scenario...
}








public async Task Test_SplitPNR_SuccessScenario()
{
    // Arrange
    var mockCancelTxnMongo = Mock.Of<ICancelTxnMongo>();
    var mockChangeExchangeApi = Mock.Of<IChangeExchangeApi>();
    var mockOapTransactionRepository = Mock.Of<IOapTransactionRepository>();
    var mockOapCxlUtility = Mock.Of<IOapCxlUtility>();
    var mockInvoiceDataAPI = Mock.Of<IInvoiceDataAPI>();
    var mockOAPUtility = Mock.Of<IOAPUtility>();

    var userId = 10;
    var splitPnrRequest = new SplitPnrRequest { OapTransactionGuid = "some-guid", TransactionID = 123 };

    var cancelTxnData = new CancelTransactionResponse { OAPTransactionID = 456 };
    mockCancelTxnMongo.Setup(m => m.GetCancelTransactionResponse(splitPnrRequest.OapTransactionGuid))
        .Returns(Task.FromResult(cancelTxnData));

    var splitPnrResponse = new SplitPnrResponse { SplittedTransactionIDs = new List<SplittedTransactionID> { new SplittedTransactionID { IsSplitPNR = true, TransactionID = 789 } } };
    mockChangeExchangeApi.Setup(m => m.SplitPNR(splitPnrRequest, userId))
        .Returns(Task.FromResult(splitPnrResponse));

    var oapTransaction = new OapTransaction { Transactionid = cancelTxnData.OAPTransactionID };
    mockOapTransactionRepository.Setup(m => m.GetByOapTransactionIdAsync(cancelTxnData.OAPTransactionID))
        .Returns(Task.FromResult(oapTransaction));

    var splitTrnx = new TransactionDetail { TransactionGUID = Guid.NewGuid() };
    mockOapCxlUtility.Setup(m => m.GetTransactionDetails(It.IsAny<int>()))
        .Returns(Task.FromResult(splitTrnx));

    // Act
    var splitPnrTask = new SplitPnrTask(_cancelTxnMongo, mockChangeExchangeApi, mockOapTransactionRepository,
        mockOapCxlUtility, mockInvoiceDataAPI, mockOAPUtility, _logger);
    var response = await splitPnrTask.SplitPNR(splitPnrRequest, userId);

    // Assert
    Assert.NotNull(response);
    Assert.True(response.IsSuccess);
    Assert.Equal(789, response.SplitTransactionId);
    Assert.NotNull(response.SplitTransactionGuid);

    // Verify mocks
    Mock.VerifyAll(mockCancelTxnMongo, mockChangeExchangeApi, mockOapTransactionRepository, mockOapCxlUtility, mockInvoiceDataAPI, mockOAPUtility);
}
