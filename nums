 public async Task<SplitPnrResponse> SplitPNR(SplitPnrRequest splitPnrRequest, int userId)
 {
     try
     {
         splitPnrRequest.UserID = userId;
         splitPnrRequest.ApplicationID = (int)SystemUser.Oap_Canceltxn_Service;
         var cancelTxnData = await _cancelTxnMongo.GetCancelTransactionResponse(splitPnrRequest.OapTransactionGuid);
         if (cancelTxnData == null || cancelTxnData.TransactionID == 0)
         {
             return new SplitPnrResponse { IsSuccess = false, IsProceedAllowed = false, ErrorInfo = "Cannot find OapTransaction details in mongo" };
         }
         var res = await _changeExchangeApi.SplitPNR(splitPnrRequest, userId);
         var splitTid = res?.SplittedTransactionIDs?.Find(I => I.IsSplitPNR)?.TransactionID ?? 0;
         res.IsSuccess = string.IsNullOrEmpty(res.ErrorInfo) && string.IsNullOrEmpty(res.SupplierError) && res.SplittedTransactionIDs?.Count > 1 && splitTid > 0;
         if (res.IsSuccess)
         {
             var createTasksRs = CreateTrxTaskForParent(userId, cancelTxnData.OAPTransactionID, splitPnrRequest.TransactionID);
             var updateSplitInMongo = _cancelTxnMongo.UpdateSplitTid(splitPnrRequest.OapTransactionGuid, cancelTxnData, res, splitTid);
             var oapTransactionRs = _oapTransactionRepository.GetByOapTransactionIdAsync(cancelTxnData.OAPTransactionID);
             var splitTrnxRs = _oapCxlUtility.GetTransactionDetails(splitTid);
             var paymentLineRs = _cancelTxnMongo.GetRefundDetails(splitPnrRequest.OapTransactionGuid);
             await Task.WhenAll(createTasksRs, updateSplitInMongo, oapTransactionRs, splitTrnxRs, paymentLineRs);
             var splitTrnx = await splitTrnxRs;
             var paymentRs = _invoiceDataAPI.GetPayments(splitTrnx?.TransactionGUID.ToString(), splitTid, userId);
             var oapTransaction = (await oapTransactionRs)?.FirstOrDefault();
             oapTransaction.Transactionid = splitTid;
             oapTransaction.Remarks += $"replaced with split parent {splitPnrRequest.TransactionID}";
             oapTransaction.UpdatedOn = _oAPUtility.ConvertUtcToEstTime(DateTime.UtcNow);
             var updateSplitTid = _oapTransactionRepository.UpdateAsync(oapTransaction);
             await Task.WhenAll(updateSplitTid, paymentRs);
             var splitPaxNames = string.Join(',', res?.SplittedTransactionIDs?.Find(I => I.IsSplitPNR)?.PaxDetails?.Select(pax => $"{pax?.FirstName} {pax?.LastName}") ?? new[] { "" } );
             var comment = $"Cancel Transaction migrated to Child TID {splitTid} for pax {splitPaxNames}";
             var comment2 = string.Join("<br/>", cancelTxnData?.TidComments);
             await Task.WhenAll(
                 UpdatePaymentLines(await paymentRs, await paymentLineRs, splitTid, splitPnrRequest.OapTransactionGuid),
                 _oapCxlUtility.InsertTidComments(splitPnrRequest.TransactionID, userId, comment),
                 _oapCxlUtility.InsertTidComments(splitTid, userId, comment2)
             );
             res.SplitTransactionId = splitTid;
             res.SplitTransactionGuid = splitTrnx?.TransactionGUID.ToString();
         }
         res.IsProceedAllowed = true;
         _logger.LogInformation("SplitPaxTask : SplitPNR : tid-{splitPnrRequest?.TransactionID}, isSplitSuccess:{res?.IsSuccess} response:{JsonConvert.SerializeObject(res)}", splitPnrRequest?.TransactionID, res?.IsSuccess, JsonConvert.SerializeObject(res));
         return res;
     }
     catch (Exception ex)
     {
         _logger.LogError(ex, "SplitPaxTask : SplitPNR : tid-{splitPnrRequest?.TransactionID}, Exception:- {ex.Message} , {ex.StackTrace}", splitPnrRequest?.TransactionID, ex.Message, ex.StackTrace);
         return new SplitPnrResponse() { IsProceedAllowed = false, ErrorInfo = $"Internal server error {ex.StackTrace}" };
     }
 }

 private async Task CreateTrxTaskForParent(int userId, int oapTransactionID, int parentTid)
 {
     AddOapTxnRequest parentOapTrnx = new()
     {
         TransactionID = parentTid,
         TransactionTypeID = (int)OAPTransactionType.Cancellation,
         CreatedBy = userId,
         TransactionStatus = (int)OAPTransactionStatus.COMPLETED,
         Remarks = "Parent Split booking"
     };
     var newParentOapTnxRs = _oapCancelTransactionHelper.CreateOapTransaction(parentOapTrnx, userId);
     var allTasksRs = _oapCancelTaskHelper.GetByOapTrasnsactionId(oapTransactionID);
     var newParentOapTnx = await newParentOapTnxRs;
     var allTasks = await allTasksRs;
     allTasks.ForEach(task =>
     {
         CancellationTaskDetails taskDetail = new()
         {
             CallID = task.CallID,
             OAPTransactionID = newParentOapTnx.OAPTransactionID,
             OAPTaskTypeID = task.OAPTaskTypeID,
             TransactionTypeID = (int)OAPTransactionType.Cancellation,
             CancelTxID = task.OAPTaskID,
             IsManualTask = task.IsManual,
             CreatedBy = userId,
             Status = OAPTransactionStatus.COMPLETED.GetHashCode(),
             IsAutomatedTask = false,
             TransactionMappingID = task?.OAPTaskMappingID ?? 0,
             ParentTaskId = task?.ParentTaskId ?? 0,
             SubDeptId = task.SubDeptId
         };
         _oapCancelTaskHelper.CreateCancellationTask(taskDetail, userId);
     });
 }

 private async Task UpdatePaymentLines(List<BillingPayment> payments, RefundDetails refundDetails, int splitTid, string oapTrxnGuid)
 {
     if (refundDetails?.PaymentLines != null)
     {
         var paymentIds = new List<int>();
         refundDetails?.PaymentLines?.ForEach(line =>
         {
             if (line?.PaidFor != 0)
             {
                 var paymentId = payments?.Find(payment => payment?.Paidfor == (int)line?.PaidFor && !paymentIds.Contains(payment.PaymentId))?.PaymentId ?? 0;
                 if (paymentId > 0)
                 {
                     line.PaymentId = paymentId;
                     paymentIds.Add(paymentId);
                     if (line.TransactionId > 0)
                     {
                         line.TransactionId = splitTid;
                     }
                 }
             }
         });
         await _cancelTxnMongo.UpdatePaymentLineDetails(refundDetails?.PaymentLines, oapTrxnGuid);
     }
 }
