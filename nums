public async Task<TestResponse> TestSplitPNR()
{
    // Arrange (mocking dependencies)
    var mockCancelTxnMongo = Substitute.For<ICancelTxnMongo>();
    var mockChangeExchangeApi = Substitute.For<IChangeExchangeApi>();
    var mockOapTransactionRepository = Substitute.For<IOapTransactionRepository>();
    var mockOapCxlUtility = Substitute.For<IOapCxlUtility>();
    var mockInvoiceDataAPI = Substitute.For<IInvoiceDataAPI>();
    var mockOAPUtility = Substitute.For<IOAPUtility>();
    var mockLogger = Substitute.For<ILogger>();

    // Mock return values and behaviors as needed
    mockCancelTxnMongo.GetCancelTransactionResponse(Arg.Any<string>())
        .Returns(new CancelTransactionResponse { OAPTransactionID = 1, TransactionID = 2 });
    mockChangeExchangeApi.SplitPNR(Arg.Any<SplitPnrRequest>(), Arg.Any<int>())
        .Returns(new SplitPnrResponse {
            IsSuccess = true,
            SplittedTransactionIDs = new List<SplittedTransactionID> {
                new SplittedTransactionID { IsSplitPNR = true, TransactionID = 3, PaxDetails = new List<PaxDetail> {
                    new PaxDetail { FirstName = "John", LastName = "Doe" }
                } }
            }
        });
    mockOapTransactionRepository.GetByOapTransactionIdAsync(Arg.Any<int>())
        .Returns(Task.FromResult(new OapTransaction { Transactionid = 1, Remarks = "" }));
    mockOapCxlUtility.GetTransactionDetails(Arg.Any<int>())
        .Returns(Task.FromResult(new TransactionDetails { TransactionGUID = Guid.NewGuid().ToString() }));
    mockInvoiceDataAPI.GetPayments(Arg.Any<string>(), Arg.Any<int>(), Arg.Any<int>())
        .Returns(Task.FromResult(new List<BillingPayment>()));
    mockCancelTxnMongo.GetRefundDetails(Arg.Any<string>())
        .Returns(new RefundDetails { PaymentLines = new List<RefundPaymentLine>() });
    mockOAPUtility.ConvertUtcToEstTime(Arg.Any<DateTime>())
        .Returns(DateTime.UtcNow); // Or a specific mocked DateTime

    // System under test (SplitPNR function)
    var splitPnrTask = new SplitPnrTask(mockCancelTxnMongo, mockChangeExchangeApi,
        mockOapTransactionRepository, mockOapCxlUtility, mockInvoiceDataAPI, mockOAPUtility, mockLogger);

    // Act (calling the function)
    var userId = 10;
    var splitPnrRequest = new SplitPnrRequest { OapTransactionGuid = "guid", TransactionID = 4 };
    TestResponse testResponse;
    try
    {
        testResponse = await splitPnrTask.SplitPNR(splitPnrRequest, userId);
    }
    catch (Exception ex)
    {
        testResponse = new TestResponse { IsSuccess = false, ErrorMessage = ex.Message };
    }

    // Assert (verifying expectations)
    if (testResponse.IsSuccess)
    {
        // Verify successful split
        Assert.IsTrue(testResponse.Data.IsSuccess);
        Assert.AreEqual(3, testResponse.Data.SplitTransactionId);
        Assert.NotNull(testResponse.Data.SplitTransactionGuid);
        Assert.Equal("Cancel Transaction migrated to Child TID 3 for pax John Doe", testResponse.Data.Comments);

        // Verify interactions with mocked dependencies (adjust as needed)
        mockCancelTxnMongo.Received().GetCancelTransactionResponse(Arg.Is(splitPnrRequest.OapTransactionGuid));
        mockChangeExchangeApi.Received().SplitPNR(Arg.Is(splitPnrRequest), Arg.Is(userId));
        mockOapTransactionRepository.Received().GetByOapTransactionIdAsync(Arg.Is(1)); // OAPTransactionID from mockCancelTxnMongo
        mockOapCxlUtility.Received().GetTransactionDetails(Arg.Is(3)); // SplittedTransactionID from mockChangeExchangeApi
        mockInvoiceDataAPI.Received().GetPayments(Arg.Any<string>(), Arg.Is(3), Arg.Is(userId));
        mockCancelTxnMongo.Received().GetRefundDetails(Arg.Is(splitPnrRequest.OapTransactionGuid
